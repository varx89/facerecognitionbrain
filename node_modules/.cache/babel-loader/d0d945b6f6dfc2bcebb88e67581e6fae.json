{"ast":null,"code":"import _classCallCheck from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { deepExtend, executeOnSingleOrMultiple } from \"tsparticles-engine\";\nimport { SplitFactor } from \"./SplitFactor\";\nimport { SplitRate } from \"./SplitRate\";\nexport var Split = /*#__PURE__*/function () {\n  function Split() {\n    _classCallCheck(this, Split);\n\n    this.count = 1;\n    this.factor = new SplitFactor();\n    this.rate = new SplitRate();\n    this.sizeOffset = true;\n  }\n\n  _createClass(Split, [{\n    key: \"load\",\n    value: function load(data) {\n      if (!data) {\n        return;\n      }\n\n      if (data.count !== undefined) {\n        this.count = data.count;\n      }\n\n      this.factor.load(data.factor);\n      this.rate.load(data.rate);\n      this.particles = executeOnSingleOrMultiple(data.particles, function (particles) {\n        return deepExtend({}, particles);\n      });\n\n      if (data.sizeOffset !== undefined) {\n        this.sizeOffset = data.sizeOffset;\n      }\n    }\n  }]);\n\n  return Split;\n}();","map":{"version":3,"names":["deepExtend","executeOnSingleOrMultiple","SplitFactor","SplitRate","Split","count","factor","rate","sizeOffset","data","undefined","load","particles"],"sources":["D:/Projects/facerecognitionbrain/node_modules/tsparticles-updater-destroy/esm/Options/Classes/Split.js"],"sourcesContent":["import { deepExtend, executeOnSingleOrMultiple } from \"tsparticles-engine\";\nimport { SplitFactor } from \"./SplitFactor\";\nimport { SplitRate } from \"./SplitRate\";\nexport class Split {\n    constructor() {\n        this.count = 1;\n        this.factor = new SplitFactor();\n        this.rate = new SplitRate();\n        this.sizeOffset = true;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.factor.load(data.factor);\n        this.rate.load(data.rate);\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        if (data.sizeOffset !== undefined) {\n            this.sizeOffset = data.sizeOffset;\n        }\n    }\n}\n"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,yBAArB,QAAsD,oBAAtD;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,WAAaC,KAAb;EACI,iBAAc;IAAA;;IACV,KAAKC,KAAL,GAAa,CAAb;IACA,KAAKC,MAAL,GAAc,IAAIJ,WAAJ,EAAd;IACA,KAAKK,IAAL,GAAY,IAAIJ,SAAJ,EAAZ;IACA,KAAKK,UAAL,GAAkB,IAAlB;EACH;;EANL;IAAA;IAAA,OAOI,cAAKC,IAAL,EAAW;MACP,IAAI,CAACA,IAAL,EAAW;QACP;MACH;;MACD,IAAIA,IAAI,CAACJ,KAAL,KAAeK,SAAnB,EAA8B;QAC1B,KAAKL,KAAL,GAAaI,IAAI,CAACJ,KAAlB;MACH;;MACD,KAAKC,MAAL,CAAYK,IAAZ,CAAiBF,IAAI,CAACH,MAAtB;MACA,KAAKC,IAAL,CAAUI,IAAV,CAAeF,IAAI,CAACF,IAApB;MACA,KAAKK,SAAL,GAAiBX,yBAAyB,CAACQ,IAAI,CAACG,SAAN,EAAiB,UAACA,SAAD,EAAe;QACtE,OAAOZ,UAAU,CAAC,EAAD,EAAKY,SAAL,CAAjB;MACH,CAFyC,CAA1C;;MAGA,IAAIH,IAAI,CAACD,UAAL,KAAoBE,SAAxB,EAAmC;QAC/B,KAAKF,UAAL,GAAkBC,IAAI,CAACD,UAAvB;MACH;IACJ;EAtBL;;EAAA;AAAA"},"metadata":{},"sourceType":"module"}