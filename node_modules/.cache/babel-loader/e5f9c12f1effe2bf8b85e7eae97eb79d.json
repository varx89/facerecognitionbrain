{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { executeOnSingleOrMultiple, itemFromSingleOrMultiple } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nexport var Absorbers = /*#__PURE__*/function () {\n  function Absorbers(container) {\n    var _this = this;\n\n    _classCallCheck(this, Absorbers);\n\n    this.container = container;\n    this.array = [];\n    this.absorbers = [];\n    this.interactivityAbsorbers = [];\n\n    container.getAbsorber = function (idxOrName) {\n      return idxOrName === undefined || typeof idxOrName === \"number\" ? _this.array[idxOrName || 0] : _this.array.find(function (t) {\n        return t.name === idxOrName;\n      });\n    };\n\n    container.addAbsorber = function (options, position) {\n      return _this.addAbsorber(options, position);\n    };\n  }\n\n  _createClass(Absorbers, [{\n    key: \"addAbsorber\",\n    value: function addAbsorber(options, position) {\n      var absorber = new AbsorberInstance(this, this.container, options, position);\n      this.array.push(absorber);\n      return absorber;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _iterator = _createForOfIteratorHelper(this.array),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var absorber = _step.value;\n          context.save();\n          absorber.draw(context);\n          context.restore();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"handleClickMode\",\n    value: function handleClickMode(mode) {\n      var absorberOptions = this.absorbers,\n          modeAbsorbers = this.interactivityAbsorbers;\n\n      if (mode === \"absorber\") {\n        var absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers),\n            absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : itemFromSingleOrMultiple(absorberOptions),\n            aPosition = this.container.interactivity.mouse.clickPosition;\n        this.addAbsorber(absorbersOptions, aPosition);\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init(options) {\n      var _this2 = this;\n\n      var _a, _b;\n\n      if (!options) {\n        return;\n      }\n\n      this.absorbers = executeOnSingleOrMultiple(options.absorbers, function (absorber) {\n        var tmp = new Absorber();\n        tmp.load(absorber);\n        return tmp;\n      });\n      this.interactivityAbsorbers = executeOnSingleOrMultiple((_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers, function (absorber) {\n        var tmp = new Absorber();\n        tmp.load(absorber);\n        return tmp;\n      });\n      executeOnSingleOrMultiple(this.absorbers, function (absorber) {\n        _this2.addAbsorber(absorber);\n      });\n    }\n  }, {\n    key: \"particleUpdate\",\n    value: function particleUpdate(particle) {\n      var _iterator2 = _createForOfIteratorHelper(this.array),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var absorber = _step2.value;\n          absorber.attract(particle);\n\n          if (particle.destroyed) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"removeAbsorber\",\n    value: function removeAbsorber(absorber) {\n      var index = this.array.indexOf(absorber);\n\n      if (index >= 0) {\n        this.array.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _iterator3 = _createForOfIteratorHelper(this.array),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var absorber = _step3.value;\n          absorber.resize();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.array = [];\n    }\n  }]);\n\n  return Absorbers;\n}();","map":{"version":3,"names":["executeOnSingleOrMultiple","itemFromSingleOrMultiple","Absorber","AbsorberInstance","Absorbers","container","array","absorbers","interactivityAbsorbers","getAbsorber","idxOrName","undefined","find","t","name","addAbsorber","options","position","absorber","push","context","save","draw","restore","mode","absorberOptions","modeAbsorbers","absorbersModeOptions","absorbersOptions","aPosition","interactivity","mouse","clickPosition","_a","_b","tmp","load","modes","particle","attract","destroyed","index","indexOf","splice","resize"],"sources":["D:/Projects/facerecognitionbrain/node_modules/tsparticles-plugin-absorbers/esm/Absorbers.js"],"sourcesContent":["import { executeOnSingleOrMultiple, itemFromSingleOrMultiple } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nexport class Absorbers {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || typeof idxOrName === \"number\"\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addAbsorber = (options, position) => this.addAbsorber(options, position);\n    }\n    addAbsorber(options, position) {\n        const absorber = new AbsorberInstance(this, this.container, options, position);\n        this.array.push(absorber);\n        return absorber;\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            context.save();\n            absorber.draw(context);\n            context.restore();\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === \"absorber\") {\n            const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : itemFromSingleOrMultiple(absorberOptions), aPosition = this.container.interactivity.mouse.clickPosition;\n            this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    init(options) {\n        var _a, _b;\n        if (!options) {\n            return;\n        }\n        this.absorbers = executeOnSingleOrMultiple(options.absorbers, (absorber) => {\n            const tmp = new Absorber();\n            tmp.load(absorber);\n            return tmp;\n        });\n        this.interactivityAbsorbers = executeOnSingleOrMultiple((_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers, (absorber) => {\n            const tmp = new Absorber();\n            tmp.load(absorber);\n            return tmp;\n        });\n        executeOnSingleOrMultiple(this.absorbers, (absorber) => {\n            this.addAbsorber(absorber);\n        });\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}