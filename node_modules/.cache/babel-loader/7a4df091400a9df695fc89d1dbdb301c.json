{"ast":null,"code":"import _regeneratorRuntime from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./utils\";\nimport { deepExtend, getDistance, getDistances, getRandom, itemFromArray } from \"tsparticles-engine\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nvar noPolygonDataLoaded = \"No polygon data loaded.\",\n    noPolygonFound = \"No polygon found, you need to specify SVG url in config.\";\nexport var PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container, engine) {\n    _classCallCheck(this, PolygonMaskInstance);\n\n    this._container = container;\n    this._engine = engine;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask();\n    this._polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  _createClass(PolygonMaskInstance, [{\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var options = this.options,\n          polygonDraw = options.draw;\n\n      if (!options.enable || !polygonDraw.enable) {\n        return;\n      }\n\n      var rawData = this.raw;\n\n      var _iterator = _createForOfIteratorHelper(this.paths),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          var path2d = path.path2d,\n              path2dSupported = this.path2DSupported;\n\n          if (!context) {\n            continue;\n          }\n\n          if (path2dSupported && path2d && this.offset) {\n            drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"initAsync\",\n    value: function () {\n      var _initAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var polygonMaskOptions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this._polygonMaskMoveRadius = polygonMaskOptions.move.radius * this._container.retina.pixelRatio;\n\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.initRawData();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initAsync(_x) {\n        return _initAsync.apply(this, arguments);\n      }\n\n      return initAsync;\n    }()\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n\n      return deepExtend({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n\n      if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n        this.drawPoints();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n\n      var container = this._container,\n          options = this.options;\n\n      if (!(options.enable && options.type !== \"none\")) {\n        return;\n      }\n\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n\n      this.redrawTimeout = window.setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.initRawData(true);\n\n              case 2:\n                _context2.next = 4;\n                return container.particles.redraw();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n\n      var container = this._container,\n          options = this.options;\n\n      if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n        return true;\n      }\n\n      if (!this.raw) {\n        throw new Error(noPolygonFound);\n      }\n\n      var canvasSize = container.canvas.size,\n          x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : getRandom() * canvasSize.width,\n          y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : getRandom() * canvasSize.height;\n      var inside = false;\n\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i],\n            pj = this.raw[j],\n            intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n\n      return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.paths),\n          _step2;\n\n      try {\n        var _loop = function _loop() {\n          var path = _step2.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n          if (pathData) {\n            var path2d = new Path2D(pathData),\n                matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n                finalPath = new Path2D(),\n                transform = matrix.scale(options.scale);\n\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n\n          path.path2d.closePath();\n        };\n\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function () {\n      var _downloadSvgPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(svgUrl, force) {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.raw);\n\n              case 3:\n                _context3.next = 5;\n                return fetch(url);\n\n              case 5:\n                req = _context3.sent;\n\n                if (req.ok) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n\n              case 8:\n                _context3.t0 = this;\n                _context3.next = 11;\n                return req.text();\n\n              case 11:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function downloadSvgPath(_x2, _x3) {\n        return _downloadSvgPath.apply(this, arguments);\n      }\n\n      return downloadSvgPath;\n    }()\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this.raw),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var item = _step3.value;\n\n          this._container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      var options = this._container.actualOptions,\n          polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(noPolygonDataLoaded);\n      var offset = 0,\n          point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n        return tot + path.length;\n      }, 0),\n          distance = totalLength / options.particles.number.value;\n\n      var _iterator4 = _createForOfIteratorHelper(this.paths),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var path = _step4.value;\n          var pathDistance = distance * index - offset;\n\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(noPolygonDataLoaded);\n      }\n\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(noPolygonDataLoaded);\n      }\n\n      var coords = itemFromArray(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n\n      var options = this.options;\n\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(noPolygonDataLoaded);\n      }\n\n      var path = itemFromArray(this.paths),\n          distance = Math.floor(getRandom() * path.length) + 1,\n          point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"initRawData\",\n    value: function () {\n      var _initRawData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(force) {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n\n              case 7:\n                if (options.data) {\n                  data = options.data;\n\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n\n              case 8:\n                this.createPath2D();\n\n                this._engine.dispatchEvent(\"polygonMaskLoaded\", {\n                  container: this._container\n                });\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function initRawData(_x4) {\n        return _initRawData.apply(this, arguments);\n      }\n\n      return initRawData;\n    }()\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n\n      var container = this._container,\n          options = this.options,\n          parser = new DOMParser(),\n          doc = parser.parseFromString(xml, \"image/svg+xml\"),\n          svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n\n      this.paths = [];\n\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n\n      var pxRatio = container.retina.pixelRatio,\n          scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return parsePaths(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, _delta, direction) {\n      var options = this.options;\n\n      if (!this.raw || !options.enable || direction !== \"top\") {\n        return false;\n      }\n\n      if (options.type === \"inside\" || options.type === \"outside\") {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n            radius = particle.getRadius();\n\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n              pj = this.raw[j];\n          closest = calcClosestPtOnSegment(pi, pj, pos);\n          var dist = getDistances(pos, closest);\n          var _ref2 = [dist.dx, dist.dy];\n          dx = _ref2[0];\n          dy = _ref2[1];\n\n          if (dist.distance < radius) {\n            segmentBounce(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === \"inline\" && particle.initialPosition) {\n        var _dist = getDistance(particle.initialPosition, particle.getPosition());\n\n        if (_dist > this._polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this._container,\n          options = this.options;\n      var position;\n\n      if (options.type === \"inline\") {\n        switch (options.inline.arrangement) {\n          case \"random-point\":\n            position = this.getRandomPoint();\n            break;\n\n          case \"random-length\":\n            position = this.getRandomPointByLength();\n            break;\n\n          case \"equidistant\":\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n\n          case \"one-per-point\":\n          case \"per-point\":\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: getRandom() * container.canvas.size.width,\n          y: getRandom() * container.canvas.size.height\n        };\n      }\n\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }]);\n\n  return PolygonMaskInstance;\n}();","map":{"version":3,"names":["calcClosestPtOnSegment","drawPolygonMask","drawPolygonMaskPath","parsePaths","segmentBounce","deepExtend","getDistance","getDistances","getRandom","itemFromArray","PolygonMask","noPolygonDataLoaded","noPolygonFound","PolygonMaskInstance","container","engine","_container","_engine","dimension","height","width","path2DSupported","window","Path2D","options","_polygonMaskMoveRadius","move","radius","retina","pixelRatio","position","enable","type","checkInsidePolygon","context","_a","paths","length","polygonDraw","draw","rawData","raw","path","path2d","path2dSupported","offset","stroke","load","polygon","polygonMaskOptions","initRawData","particle","delta","direction","polygonBounce","_b","randomPoint","inline","arrangement","drawPoints","redrawTimeout","clearTimeout","setTimeout","particles","redraw","Error","canvasSize","canvas","size","x","y","inside","i","j","pi","pj","intersect","pathData","element","getAttribute","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","scale","addPath","moveTo","forEach","pos","lineTo","closePath","svgUrl","force","url","forceDownload","undefined","fetch","req","ok","text","parseSvgPath","item","addParticle","index","_c","_d","_e","_f","_g","actualOptions","point","totalLength","reduce","tot","distance","number","value","pathDistance","getPointAtLength","coords","Math","floor","downloadSvgPath","data","Array","map","t","join","namespaces","svg","createPath2D","dispatchEvent","xml","parser","DOMParser","doc","parseFromString","getElementsByTagName","svgPaths","push","getTotalLength","pxRatio","parseFloat","_delta","closest","dx","dy","getPosition","getRadius","dist","velocity","factor","mult","initialPosition","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex"],"sources":["D:/Projects/facerecognitionbrain/node_modules/tsparticles-plugin-polygon-mask/esm/PolygonMaskInstance.js"],"sourcesContent":["import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./utils\";\nimport { deepExtend, getDistance, getDistances, getRandom, itemFromArray } from \"tsparticles-engine\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nconst noPolygonDataLoaded = \"No polygon data loaded.\", noPolygonFound = \"No polygon found, you need to specify SVG url in config.\";\nexport class PolygonMaskInstance {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask();\n        this._polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options, polygonDraw = options.draw;\n        if (!options.enable || !polygonDraw.enable) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d, path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this._polygonMaskMoveRadius = polygonMaskOptions.move.radius * this._container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return deepExtend({}, position ? position : this.randomPoint());\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    resize() {\n        const container = this._container, options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this._container, options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(noPolygonFound);\n        }\n        const canvasSize = container.canvas.size, x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : getRandom() * canvasSize.width, y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : getRandom() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData), matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this._container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this._container.actualOptions, polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(noPolygonDataLoaded);\n        let offset = 0, point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0), distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const coords = itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const path = itemFromArray(this.paths), distance = Math.floor(getRandom() * path.length) + 1, point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n        this._engine.dispatchEvent(\"polygonMaskLoaded\", {\n            container: this._container,\n        });\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this._container, options = this.options, parser = new DOMParser(), doc = parser.parseFromString(xml, \"image/svg+xml\"), svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio, scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this._polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    randomPoint() {\n        const container = this._container, options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: getRandom() * container.canvas.size.width,\n                y: getRandom() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}