{"ast":null,"code":"import _classCallCheck from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nexport var BaseMover = /*#__PURE__*/function () {\n  function BaseMover() {\n    _classCallCheck(this, BaseMover);\n  }\n\n  _createClass(BaseMover, [{\n    key: \"init\",\n    value: function init(particle) {\n      var _a;\n\n      var container = particle.container,\n          options = particle.options,\n          gravityOptions = options.move.gravity,\n          spinOptions = options.move.spin;\n      particle.gravity = {\n        enable: gravityOptions.enable,\n        acceleration: getRangeValue(gravityOptions.acceleration),\n        inverse: gravityOptions.inverse\n      };\n\n      if (spinOptions.enable) {\n        var spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : {\n          x: 50,\n          y: 50\n        };\n        var spinCenter = {\n          x: spinPos.x / 100 * container.canvas.size.width,\n          y: spinPos.y / 100 * container.canvas.size.height\n        };\n        var pos = particle.getPosition();\n        var distance = getDistance(pos, spinCenter);\n        var spinAcceleration = getRangeValue(spinOptions.acceleration);\n        particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n        particle.spin = {\n          center: spinCenter,\n          direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n          angle: particle.velocity.angle,\n          radius: distance,\n          acceleration: particle.retina.spinAcceleration\n        };\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed && particle.options.move.enable;\n    }\n  }, {\n    key: \"move\",\n    value: function move(particle, delta) {\n      var _a, _b, _c;\n\n      var _d, _e;\n\n      var particleOptions = particle.options,\n          moveOptions = particleOptions.move;\n\n      if (!moveOptions.enable) {\n        return;\n      }\n\n      var container = particle.container,\n          slowFactor = getProximitySpeedFactor(particle),\n          baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n          moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n          maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n          sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n          speedFactor = sizeFactor * slowFactor * (delta.factor || 1),\n          diffFactor = 2,\n          moveSpeed = baseSpeed * speedFactor / diffFactor;\n\n      if (moveOptions.spin.enable) {\n        spin(particle, moveSpeed);\n      } else {\n        applyPath(particle, delta);\n        var gravityOptions = particle.gravity,\n            gravityFactor = (gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && gravityOptions.inverse ? -1 : 1;\n\n        if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && moveSpeed) {\n          particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n        }\n\n        if (moveDrift && moveSpeed) {\n          particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n        }\n\n        var decay = particle.moveDecay;\n\n        if (decay != 1) {\n          particle.velocity.multTo(decay);\n        }\n\n        var velocity = particle.velocity.mult(moveSpeed),\n            maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n        if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n          velocity.y = gravityFactor * maxSpeed;\n\n          if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n          }\n        }\n\n        var zIndexOptions = particle.options.zIndex,\n            zVelocityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.velocityRate);\n\n        if (zVelocityFactor != 1) {\n          velocity.multTo(zVelocityFactor);\n        }\n\n        particle.position.addTo(velocity);\n\n        if (moveOptions.vibrate) {\n          particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n          particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n      }\n\n      applyDistance(particle);\n    }\n  }]);\n\n  return BaseMover;\n}();","map":{"version":3,"names":["getDistance","getRangeMax","getRangeValue","applyDistance","applyPath","getProximitySpeedFactor","spin","BaseMover","particle","_a","container","options","gravityOptions","move","gravity","spinOptions","enable","acceleration","inverse","spinPos","position","x","y","spinCenter","canvas","size","width","height","pos","getPosition","distance","spinAcceleration","retina","pixelRatio","center","direction","velocity","angle","radius","destroyed","delta","_b","_c","_d","_e","particleOptions","moveOptions","slowFactor","baseSpeed","moveSpeed","speed","reduceFactor","moveDrift","drift","maxSize","value","sizeFactor","getRadius","speedFactor","factor","diffFactor","gravityFactor","decay","moveDecay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","addTo","vibrate","Math","sin","cos"],"sources":["D:/Projects/facerecognitionbrain/node_modules/tsparticles-move-base/esm/BaseMover.js"],"sourcesContent":["import { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nexport class BaseMover {\n    init(particle) {\n        var _a;\n        const container = particle.container, options = particle.options, gravityOptions = options.move.gravity, spinOptions = options.move.spin;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        if (spinOptions.enable) {\n            const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = particle.getPosition();\n            const distance = getDistance(pos, spinCenter);\n            const spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, slowFactor = getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, speedFactor = sizeFactor * slowFactor * (delta.factor || 1), diffFactor = 2, moveSpeed = (baseSpeed * speedFactor) / diffFactor;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            applyPath(particle, delta);\n            const gravityOptions = particle.gravity, gravityFactor = (gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && gravityOptions.inverse ? -1 : 1;\n            if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && moveSpeed) {\n                particle.velocity.y +=\n                    (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n            }\n            if (moveDrift && moveSpeed) {\n                particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n            }\n            const decay = particle.moveDecay;\n            if (decay != 1) {\n                particle.velocity.multTo(decay);\n            }\n            const velocity = particle.velocity.mult(moveSpeed), maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n            if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) &&\n                maxSpeed > 0 &&\n                ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                    (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n                velocity.y = gravityFactor * maxSpeed;\n                if (moveSpeed) {\n                    particle.velocity.y = velocity.y / moveSpeed;\n                }\n            }\n            const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}