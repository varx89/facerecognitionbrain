{"ast":null,"code":"import _classCallCheck from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Roll } from \"./Options/Classes/Roll\";\n\nfunction updateRoll(particle, delta) {\n  var roll = particle.options.roll;\n\n  if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n    return;\n  }\n\n  var speed = particle.roll.speed * delta.factor,\n      max = 2 * Math.PI;\n  particle.roll.angle += speed;\n\n  if (particle.roll.angle > max) {\n    particle.roll.angle -= max;\n  }\n}\n\nexport var RollUpdater = /*#__PURE__*/function () {\n  function RollUpdater() {\n    _classCallCheck(this, RollUpdater);\n  }\n\n  _createClass(RollUpdater, [{\n    key: \"getTransformValues\",\n    value: function getTransformValues(particle) {\n      var _a;\n\n      var roll = ((_a = particle.roll) === null || _a === void 0 ? void 0 : _a.enable) && particle.roll,\n          rollHorizontal = roll && roll.horizontal,\n          rollVertical = roll && roll.vertical;\n      return {\n        a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n        d: rollVertical ? Math.sin(roll.angle) : undefined\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function init(particle) {\n      var rollOpt = particle.options.roll;\n\n      if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n        particle.roll = {\n          enable: rollOpt.enable,\n          horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n          vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n          angle: getRandom() * Math.PI * 2,\n          speed: getRangeValue(rollOpt.speed) / 360\n        };\n\n        if (rollOpt.backColor) {\n          particle.backColor = rangeColorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n          var alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n          particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n          };\n        } else if (rollOpt.darken.enable) {\n          particle.roll.alter = {\n            type: \"darken\",\n            value: getRangeValue(rollOpt.darken.value)\n          };\n        } else if (rollOpt.enlighten.enable) {\n          particle.roll.alter = {\n            type: \"enlighten\",\n            value: getRangeValue(rollOpt.enlighten.value)\n          };\n        }\n      } else {\n        particle.roll = {\n          enable: false,\n          horizontal: false,\n          vertical: false,\n          angle: 0,\n          speed: 0\n        };\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var roll = particle.options.roll;\n      return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      if (!options.roll) {\n        options.roll = new Roll();\n      }\n\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.roll.load(source === null || source === void 0 ? void 0 : source.roll);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n\n      updateRoll(particle, delta);\n    }\n  }]);\n\n  return RollUpdater;\n}();","map":{"version":3,"names":["getRandom","getRangeValue","rangeColorToHsl","Roll","updateRoll","particle","delta","roll","options","enable","speed","factor","max","Math","PI","angle","RollUpdater","_a","rollHorizontal","horizontal","rollVertical","vertical","a","cos","undefined","d","sin","rollOpt","mode","backColor","darken","enlighten","alterType","alter","type","value","destroyed","spawning","sources","source","load","isEnabled"],"sources":["D:/Projects/facerecognitionbrain/node_modules/tsparticles-updater-roll/esm/RollUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Roll } from \"./Options/Classes/Roll\";\nfunction updateRoll(particle, delta) {\n    const roll = particle.options.roll;\n    if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n        return;\n    }\n    const speed = particle.roll.speed * delta.factor, max = 2 * Math.PI;\n    particle.roll.angle += speed;\n    if (particle.roll.angle > max) {\n        particle.roll.angle -= max;\n    }\n}\nexport class RollUpdater {\n    getTransformValues(particle) {\n        var _a;\n        const roll = ((_a = particle.roll) === null || _a === void 0 ? void 0 : _a.enable) && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        const rollOpt = particle.options.roll;\n        if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n            particle.roll = {\n                enable: rollOpt.enable,\n                horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n                vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n                angle: getRandom() * Math.PI * 2,\n                speed: getRangeValue(rollOpt.speed) / 360,\n            };\n            if (rollOpt.backColor) {\n                particle.backColor = rangeColorToHsl(rollOpt.backColor);\n            }\n            else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                const alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n                particle.roll.alter = {\n                    type: alterType,\n                    value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n                };\n            }\n            else if (rollOpt.darken.enable) {\n                particle.roll.alter = {\n                    type: \"darken\",\n                    value: getRangeValue(rollOpt.darken.value),\n                };\n            }\n            else if (rollOpt.enlighten.enable) {\n                particle.roll.alter = {\n                    type: \"enlighten\",\n                    value: getRangeValue(rollOpt.enlighten.value),\n                };\n            }\n        }\n        else {\n            particle.roll = {\n                enable: false,\n                horizontal: false,\n                vertical: false,\n                angle: 0,\n                speed: 0,\n            };\n        }\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source === null || source === void 0 ? void 0 : source.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}