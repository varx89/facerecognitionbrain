{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { drawLinkLine as _drawLinkLine, drawLinkTriangle as _drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nexport var LinkInstance = /*#__PURE__*/function () {\n  function LinkInstance(container) {\n    _classCallCheck(this, LinkInstance);\n\n    this.container = container;\n  }\n\n  _createClass(LinkInstance, [{\n    key: \"drawParticle\",\n    value: function drawParticle(context, particle) {\n      var _a;\n\n      var container = this.container,\n          pOptions = particle.options;\n\n      if (!particle.links || particle.links.length <= 0) {\n        return;\n      }\n\n      context.save();\n      var p1Links = particle.links.filter(function (l) {\n        return pOptions.links && container.particles.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency;\n      });\n\n      var _iterator = _createForOfIteratorHelper(p1Links),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var link = _step.value;\n          this.drawTriangles(container, pOptions, particle, link, p1Links);\n\n          if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n            this.drawLinkLine(particle, link);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      context.restore();\n    }\n  }, {\n    key: \"particleCreated\",\n    value: function particleCreated(particle) {\n      particle.links = [];\n\n      if (!particle.options.links) {\n        return;\n      }\n\n      var ratio = this.container.retina.pixelRatio;\n      particle.retina.linksDistance = particle.options.links.distance * ratio;\n      particle.retina.linksWidth = particle.options.links.width * ratio;\n    }\n  }, {\n    key: \"particleDestroyed\",\n    value: function particleDestroyed(particle) {\n      particle.links = [];\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(p1, link) {\n      var container = this.container,\n          options = container.actualOptions,\n          p2 = link.destination,\n          pos1 = p1.getPosition(),\n          pos2 = p2.getPosition();\n      var opacity = link.opacity;\n      container.canvas.draw(function (ctx) {\n        var _a, _b, _c;\n\n        if (!p1.options.links) {\n          return;\n        }\n\n        var colorLine;\n        var twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n\n        if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n          var twinkleFreq = twinkle.frequency,\n              twinkleRgb = rangeColorToRgb(twinkle.color),\n              twinkling = getRandom() < twinkleFreq;\n\n          if (twinkling && twinkleRgb) {\n            colorLine = twinkleRgb;\n            opacity = getRangeValue(twinkle.opacity);\n          }\n        }\n\n        if (!colorLine) {\n          var linksOptions = p1.options.links,\n              linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorLine = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorLine) {\n          return;\n        }\n\n        var width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0,\n            maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n\n        _drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n      });\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(p1, link1, link2) {\n      var _a;\n\n      if (!p1.options.links) {\n        return;\n      }\n\n      var container = this.container,\n          options = container.actualOptions,\n          p2 = link1.destination,\n          p3 = link2.destination,\n          triangleOptions = p1.options.links.triangles,\n          opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n\n      if (opacityTriangle <= 0) {\n        return;\n      }\n\n      container.canvas.draw(function (ctx) {\n        var _a;\n\n        var pos1 = p1.getPosition(),\n            pos2 = p2.getPosition(),\n            pos3 = p3.getPosition(),\n            linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n\n        if (getDistance(pos1, pos2) > linksDistance || getDistance(pos3, pos2) > linksDistance || getDistance(pos3, pos1) > linksDistance) {\n          return;\n        }\n\n        var colorTriangle = rangeColorToRgb(triangleOptions.color);\n\n        if (!colorTriangle) {\n          var linksOptions = p1.options.links,\n              linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorTriangle = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorTriangle) {\n          return;\n        }\n\n        _drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n      });\n    }\n  }, {\n    key: \"drawTriangles\",\n    value: function drawTriangles(container, options, p1, link, p1Links) {\n      var _a, _b, _c;\n\n      var p2 = link.destination,\n          particles = container.particles;\n\n      if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n        return;\n      }\n\n      var vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter(function (t) {\n        var linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n        return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex(function (l) {\n          return l.destination === t.destination;\n        }) >= 0;\n      });\n\n      if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(vertices),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var vertex = _step2.value;\n          var p3 = vertex.destination,\n              triangleFreq = particles.getTriangleFrequency(p1, p2, p3);\n\n          if (triangleFreq > options.links.triangles.frequency) {\n            continue;\n          }\n\n          this.drawLinkTriangle(p1, link, vertex);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }]);\n\n  return LinkInstance;\n}();","map":{"version":3,"names":["drawLinkLine","drawLinkTriangle","getDistance","getLinkColor","getRandom","getRangeValue","rangeColorToRgb","LinkInstance","container","context","particle","_a","pOptions","options","links","length","save","p1Links","filter","l","particles","getLinkFrequency","destination","frequency","link","drawTriangles","opacity","retina","linksWidth","restore","ratio","pixelRatio","linksDistance","distance","width","p1","actualOptions","p2","pos1","getPosition","pos2","canvas","draw","ctx","_b","_c","colorLine","twinkle","lines","enable","twinkleFreq","twinkleRgb","color","twinkling","linksOptions","linkColor","id","undefined","linksColors","get","linksColor","maxDistance","size","warp","backgroundMask","composite","shadow","link1","link2","p3","triangleOptions","triangles","opacityTriangle","pos3","colorTriangle","vertices","t","linkFreq","findIndex","vertex","triangleFreq","getTriangleFrequency"],"sources":["D:/Projects/facerecognitionbrain/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js"],"sourcesContent":["import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n    }\n    drawParticle(context, particle) {\n        var _a;\n        const container = this.container, pOptions = particle.options;\n        if (!particle.links || particle.links.length <= 0) {\n            return;\n        }\n        context.save();\n        const p1Links = particle.links.filter((l) => pOptions.links &&\n            container.particles.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency);\n        for (const link of p1Links) {\n            this.drawTriangles(container, pOptions, particle, link, p1Links);\n            if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n                this.drawLinkLine(particle, link);\n            }\n        }\n        context.restore();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio;\n        particle.retina.linksDistance = particle.options.links.distance * ratio;\n        particle.retina.linksWidth = particle.options.links.width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n    drawLinkLine(p1, link) {\n        const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        let opacity = link.opacity;\n        container.canvas.draw((ctx) => {\n            var _a, _b, _c;\n            if (!p1.options.links) {\n                return;\n            }\n            let colorLine;\n            const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n            if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n                const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                if (twinkling && twinkleRgb) {\n                    colorLine = twinkleRgb;\n                    opacity = getRangeValue(twinkle.opacity);\n                }\n            }\n            if (!colorLine) {\n                const linksOptions = p1.options.links, linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorLine = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorLine) {\n                return;\n            }\n            const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0, maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n            drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n        });\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a;\n        if (!p1.options.links) {\n            return;\n        }\n        const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, triangleOptions = p1.options.links.triangles, opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        if (opacityTriangle <= 0) {\n            return;\n        }\n        container.canvas.draw((ctx) => {\n            var _a;\n            const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n            if (getDistance(pos1, pos2) > linksDistance ||\n                getDistance(pos3, pos2) > linksDistance ||\n                getDistance(pos3, pos1) > linksDistance) {\n                return;\n            }\n            let colorTriangle = rangeColorToRgb(triangleOptions.color);\n            if (!colorTriangle) {\n                const linksOptions = p1.options.links, linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorTriangle = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorTriangle) {\n                return;\n            }\n            drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n        });\n    }\n    drawTriangles(container, options, p1, link, p1Links) {\n        var _a, _b, _c;\n        const p2 = link.destination, particles = container.particles;\n        if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n            return;\n        }\n        const vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter((t) => {\n            const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n            return (p2.options.links &&\n                linkFreq <= p2.options.links.frequency &&\n                p1Links.findIndex((l) => l.destination === t.destination) >= 0);\n        });\n        if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n            return;\n        }\n        for (const vertex of vertices) {\n            const p3 = vertex.destination, triangleFreq = particles.getTriangleFrequency(p1, p2, p3);\n            if (triangleFreq > options.links.triangles.frequency) {\n                continue;\n            }\n            this.drawLinkTriangle(p1, link, vertex);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}