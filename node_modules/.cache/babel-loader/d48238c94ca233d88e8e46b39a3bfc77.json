{"ast":null,"code":"import _regeneratorRuntime from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { downloadSvgImage, loadImage, replaceImageColor } from \"./Utils\";\nexport var ImageDrawer = /*#__PURE__*/function () {\n  function ImageDrawer() {\n    _classCallCheck(this, ImageDrawer);\n\n    this._images = [];\n  }\n\n  _createClass(ImageDrawer, [{\n    key: \"addImage\",\n    value: function addImage(container, image) {\n      var containerImages = this.getImages(container);\n      containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._images = [];\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context, particle, radius, opacity) {\n      var _a;\n\n      var image = particle.image,\n          element = image === null || image === void 0 ? void 0 : image.element;\n\n      if (!element) {\n        return;\n      }\n\n      var ratio = (_a = image === null || image === void 0 ? void 0 : image.ratio) !== null && _a !== void 0 ? _a : 1,\n          pos = {\n        x: -radius,\n        y: -radius\n      };\n      context.globalAlpha = opacity;\n      context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);\n      context.globalAlpha = 1;\n    }\n  }, {\n    key: \"getImages\",\n    value: function getImages(container) {\n      var containerImages = this._images.find(function (t) {\n        return t.id === container.id;\n      });\n\n      if (!containerImages) {\n        this._images.push({\n          id: container.id,\n          images: []\n        });\n\n        return this.getImages(container);\n      } else {\n        return containerImages;\n      }\n    }\n  }, {\n    key: \"getSidesCount\",\n    value: function getSidesCount() {\n      return 12;\n    }\n  }, {\n    key: \"loadShape\",\n    value: function loadShape(particle) {\n      var _this = this;\n\n      if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n        return;\n      }\n\n      var container = particle.container,\n          images = this.getImages(container).images,\n          imageData = particle.shapeData,\n          image = images.find(function (t) {\n        return t.source === imageData.src;\n      });\n\n      if (!image) {\n        this.loadImageShape(container, imageData).then(function () {\n          _this.loadShape(particle);\n        });\n        return;\n      }\n\n      if (image.error) {\n        return;\n      }\n    }\n  }, {\n    key: \"particleInit\",\n    value: function particleInit(container, particle) {\n      var _this2 = this;\n\n      var _a;\n\n      if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n        return;\n      }\n\n      var images = this.getImages(container).images,\n          imageData = particle.shapeData,\n          color = particle.getFillColor(),\n          replaceColor = (_a = imageData.replaceColor) !== null && _a !== void 0 ? _a : imageData.replace_color,\n          image = images.find(function (t) {\n        return t.source === imageData.src;\n      });\n\n      if (!image) {\n        return;\n      }\n\n      if (image.loading) {\n        setTimeout(function () {\n          _this2.particleInit(container, particle);\n        });\n        return;\n      }\n\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _a, _b, imageRes, fill, close, imageShape;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(image.svgData && replaceColor && color)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return replaceImageColor(image, imageData, color, particle);\n\n              case 3:\n                imageRes = _context.sent;\n                _context.next = 7;\n                break;\n\n              case 6:\n                imageRes = {\n                  color: color,\n                  data: image,\n                  element: image.element,\n                  loaded: true,\n                  ratio: imageData.width / imageData.height,\n                  replaceColor: replaceColor,\n                  source: imageData.src\n                };\n\n              case 7:\n                if (!imageRes.ratio) {\n                  imageRes.ratio = 1;\n                }\n\n                fill = (_a = imageData.fill) !== null && _a !== void 0 ? _a : particle.fill, close = (_b = imageData.close) !== null && _b !== void 0 ? _b : particle.close, imageShape = {\n                  image: imageRes,\n                  fill: fill,\n                  close: close\n                };\n                particle.image = imageShape.image;\n                particle.fill = imageShape.fill;\n                particle.close = imageShape.close;\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }, {\n    key: \"loadImageShape\",\n    value: function () {\n      var _loadImageShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(container, imageShape) {\n        var _a, source, image, imageFunc;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                source = imageShape.src;\n\n                if (source) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw new Error(\"Error tsParticles - No image.src\");\n\n              case 3:\n                _context2.prev = 3;\n                image = {\n                  source: source,\n                  type: source.substring(source.length - 3),\n                  error: false,\n                  loading: true\n                };\n                this.addImage(container, image);\n                imageFunc = ((_a = imageShape.replaceColor) !== null && _a !== void 0 ? _a : imageShape.replace_color) ? downloadSvgImage : loadImage;\n                _context2.next = 9;\n                return imageFunc(image);\n\n              case 9:\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](3);\n                throw new Error(\"tsParticles error - \".concat(imageShape.src, \" not found\"));\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 11]]);\n      }));\n\n      function loadImageShape(_x, _x2) {\n        return _loadImageShape.apply(this, arguments);\n      }\n\n      return loadImageShape;\n    }()\n  }]);\n\n  return ImageDrawer;\n}();","map":{"version":3,"names":["downloadSvgImage","loadImage","replaceImageColor","ImageDrawer","_images","container","image","containerImages","getImages","images","push","context","particle","radius","opacity","_a","element","ratio","pos","x","y","globalAlpha","drawImage","find","t","id","shape","imageData","shapeData","source","src","loadImageShape","then","loadShape","error","color","getFillColor","replaceColor","replace_color","loading","setTimeout","particleInit","svgData","imageRes","data","loaded","width","height","fill","close","_b","imageShape","Error","type","substring","length","addImage","imageFunc"],"sources":["D:/Projects/facerecognitionbrain/node_modules/tsparticles-shape-image/esm/ImageDrawer.js"],"sourcesContent":["import { downloadSvgImage, loadImage, replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n    constructor() {\n        this._images = [];\n    }\n    addImage(container, image) {\n        const containerImages = this.getImages(container);\n        containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n    }\n    destroy() {\n        this._images = [];\n    }\n    draw(context, particle, radius, opacity) {\n        var _a;\n        const image = particle.image, element = image === null || image === void 0 ? void 0 : image.element;\n        if (!element) {\n            return;\n        }\n        const ratio = (_a = image === null || image === void 0 ? void 0 : image.ratio) !== null && _a !== void 0 ? _a : 1, pos = {\n            x: -radius,\n            y: -radius,\n        };\n        context.globalAlpha = opacity;\n        context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        context.globalAlpha = 1;\n    }\n    getImages(container) {\n        const containerImages = this._images.find((t) => t.id === container.id);\n        if (!containerImages) {\n            this._images.push({\n                id: container.id,\n                images: [],\n            });\n            return this.getImages(container);\n        }\n        else {\n            return containerImages;\n        }\n    }\n    getSidesCount() {\n        return 12;\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        const container = particle.container, images = this.getImages(container).images, imageData = particle.shapeData, image = images.find((t) => t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(container, imageData).then(() => {\n                this.loadShape(particle);\n            });\n            return;\n        }\n        if (image.error) {\n            return;\n        }\n    }\n    particleInit(container, particle) {\n        var _a;\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        const images = this.getImages(container).images, imageData = particle.shapeData, color = particle.getFillColor(), replaceColor = (_a = imageData.replaceColor) !== null && _a !== void 0 ? _a : imageData.replace_color, image = images.find((t) => t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            var _a, _b;\n            let imageRes;\n            if (image.svgData && replaceColor && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    loaded: true,\n                    ratio: imageData.width / imageData.height,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = (_a = imageData.fill) !== null && _a !== void 0 ? _a : particle.fill, close = (_b = imageData.close) !== null && _b !== void 0 ? _b : particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n    async loadImageShape(container, imageShape) {\n        var _a;\n        const source = imageShape.src;\n        if (!source) {\n            throw new Error(\"Error tsParticles - No image.src\");\n        }\n        try {\n            const image = {\n                source: source,\n                type: source.substring(source.length - 3),\n                error: false,\n                loading: true,\n            };\n            this.addImage(container, image);\n            const imageFunc = ((_a = imageShape.replaceColor) !== null && _a !== void 0 ? _a : imageShape.replace_color) ? downloadSvgImage : loadImage;\n            await imageFunc(image);\n        }\n        catch (_b) {\n            throw new Error(`tsParticles error - ${imageShape.src} not found`);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}