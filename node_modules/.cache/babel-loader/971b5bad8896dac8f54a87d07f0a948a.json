{"ast":null,"code":"import _regeneratorRuntime from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { clear as _clear, drawParticle as _drawParticle, drawParticlePlugin as _drawParticlePlugin, drawPlugin as _drawPlugin, paintBase } from \"../Utils/CanvasUtils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { deepExtend } from \"../Utils/Utils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\n\nfunction setTransformValue(factor, newFactor, key) {\n  var _a;\n\n  var newValue = newFactor[key];\n\n  if (newValue !== undefined) {\n    factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n  }\n}\n\nexport var Canvas = /*#__PURE__*/function () {\n  function Canvas(container) {\n    _classCallCheck(this, Canvas);\n\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this._context = null;\n    this._generatedCanvas = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n\n  _createClass(Canvas, [{\n    key: \"clear\",\n    value: function clear() {\n      var _this = this;\n\n      var options = this.container.actualOptions,\n          trail = options.particles.move.trail;\n\n      if (options.backgroundMask.enable) {\n        this.paint();\n      } else if (trail.enable && trail.length > 0 && this._trailFillColor) {\n        this._paintBase(getStyleFromRgb(this._trailFillColor, 1 / trail.length));\n      } else {\n        this.draw(function (ctx) {\n          _clear(ctx, _this.size);\n        });\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this2 = this;\n\n      var _a;\n\n      if (this._generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      } else {\n        this._resetOriginalStyle();\n      }\n\n      this.draw(function (ctx) {\n        _clear(ctx, _this2.size);\n      });\n      this._preDrawUpdaters = [];\n      this._postDrawUpdaters = [];\n      this._resizePlugins = [];\n      this._colorPlugins = [];\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(cb) {\n      if (!this._context) {\n        return;\n      }\n\n      return cb(this._context);\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(particle, delta) {\n      var _this3 = this;\n\n      var _a;\n\n      if (particle.spawning || particle.destroyed) {\n        return;\n      }\n\n      var radius = particle.getRadius();\n\n      if (radius <= 0) {\n        return;\n      }\n\n      var pfColor = particle.getFillColor(),\n          psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n      var _this$_getPluginParti = this._getPluginParticleColors(particle),\n          _this$_getPluginParti2 = _slicedToArray(_this$_getPluginParti, 2),\n          fColor = _this$_getPluginParti2[0],\n          sColor = _this$_getPluginParti2[1];\n\n      if (!fColor) {\n        fColor = pfColor;\n      }\n\n      if (!sColor) {\n        sColor = psColor;\n      }\n\n      if (!fColor && !sColor) {\n        return;\n      }\n\n      this.draw(function (ctx) {\n        var _a, _b, _c, _d, _e;\n\n        var options = _this3.container.actualOptions,\n            zIndexOptions = particle.options.zIndex,\n            zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate),\n            opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1,\n            strokeOpacity = (_e = (_d = particle.stroke) === null || _d === void 0 ? void 0 : _d.opacity) !== null && _e !== void 0 ? _e : opacity,\n            zOpacity = opacity * zOpacityFactor,\n            zStrokeOpacity = strokeOpacity * zOpacityFactor,\n            transform = {},\n            colorStyles = {\n          fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n        };\n        colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n\n        _this3._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n\n        _drawParticle({\n          container: _this3.container,\n          context: ctx,\n          particle: particle,\n          delta: delta,\n          colorStyles: colorStyles,\n          backgroundMask: options.backgroundMask.enable,\n          composite: options.backgroundMask.composite,\n          radius: radius * Math.pow(1 - particle.zIndexFactor, zIndexOptions.sizeRate),\n          opacity: zOpacity,\n          shadow: particle.options.shadow,\n          transform: transform\n        });\n\n        _this3._applyPostDrawUpdaters(particle);\n      });\n    }\n  }, {\n    key: \"drawParticlePlugin\",\n    value: function drawParticlePlugin(plugin, particle, delta) {\n      this.draw(function (ctx) {\n        _drawParticlePlugin(ctx, plugin, particle, delta);\n      });\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(plugin, delta) {\n      this.draw(function (ctx) {\n        _drawPlugin(ctx, plugin, delta);\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.resize();\n\n      this._initStyle();\n\n      this._initCover();\n\n      this._initTrail();\n\n      this.initBackground();\n      this.initUpdaters();\n      this.initPlugins();\n      this.paint();\n    }\n  }, {\n    key: \"initBackground\",\n    value: function initBackground() {\n      var options = this.container.actualOptions,\n          background = options.background,\n          element = this.element,\n          elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n      if (!elementStyle) {\n        return;\n      }\n\n      if (background.color) {\n        var color = rangeColorToRgb(background.color);\n        elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n      } else {\n        elementStyle.backgroundColor = \"\";\n      }\n\n      elementStyle.backgroundImage = background.image || \"\";\n      elementStyle.backgroundPosition = background.position || \"\";\n      elementStyle.backgroundRepeat = background.repeat || \"\";\n      elementStyle.backgroundSize = background.size || \"\";\n    }\n  }, {\n    key: \"initPlugins\",\n    value: function initPlugins() {\n      this._resizePlugins = [];\n\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.resize) {\n            this._resizePlugins.push(plugin);\n          }\n\n          if (plugin.particleFillColor || plugin.particleStrokeColor) {\n            this._colorPlugins.push(plugin);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"initUpdaters\",\n    value: function initUpdaters() {\n      this._preDrawUpdaters = [];\n      this._postDrawUpdaters = [];\n\n      var _iterator2 = _createForOfIteratorHelper(this.container.particles.updaters),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var updater = _step2.value;\n\n          if (updater.afterDraw) {\n            this._postDrawUpdaters.push(updater);\n          }\n\n          if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n            this._preDrawUpdaters.push(updater);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"loadCanvas\",\n    value: function loadCanvas(canvas) {\n      var _a;\n\n      if (this._generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this._generatedCanvas = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generatedCanvas;\n      this.element = canvas;\n      this._originalStyle = deepExtend({}, this.element.style);\n      this.size.height = canvas.offsetHeight;\n      this.size.width = canvas.offsetWidth;\n      this._context = this.element.getContext(\"2d\");\n      this.container.retina.init();\n      this.initBackground();\n    }\n  }, {\n    key: \"paint\",\n    value: function paint() {\n      var _this4 = this;\n\n      var options = this.container.actualOptions;\n      this.draw(function (ctx) {\n        if (options.backgroundMask.enable && options.backgroundMask.cover) {\n          _clear(ctx, _this4.size);\n\n          _this4._paintBase(_this4._coverColorStyle);\n        } else {\n          _this4._paintBase();\n        }\n      });\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (!this.element) {\n        return;\n      }\n\n      var container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          size = container.canvas.size,\n          newSize = {\n        width: this.element.offsetWidth * pxRatio,\n        height: this.element.offsetHeight * pxRatio\n      };\n\n      if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n        return;\n      }\n\n      var oldSize = Object.assign({}, size);\n      this.element.width = size.width = this.element.offsetWidth * pxRatio;\n      this.element.height = size.height = this.element.offsetHeight * pxRatio;\n\n      if (this.container.started) {\n        this.resizeFactor = {\n          width: size.width / oldSize.width,\n          height: size.height / oldSize.height\n        };\n      }\n    }\n  }, {\n    key: \"windowResize\",\n    value: function () {\n      var _windowResize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var container, needsRefresh;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.element) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                this.resize();\n                container = this.container, needsRefresh = container.updateActualOptions();\n                container.particles.setDensity();\n\n                this._applyResizePlugins();\n\n                if (!needsRefresh) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 9;\n                return container.refresh();\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function windowResize() {\n        return _windowResize.apply(this, arguments);\n      }\n\n      return windowResize;\n    }()\n  }, {\n    key: \"_applyPostDrawUpdaters\",\n    value: function _applyPostDrawUpdaters(particle) {\n      var _a;\n\n      var _iterator3 = _createForOfIteratorHelper(this._postDrawUpdaters),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var updater = _step3.value;\n          (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"_applyPreDrawUpdaters\",\n    value: function _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n      var _a;\n\n      var _iterator4 = _createForOfIteratorHelper(this._preDrawUpdaters),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var updater = _step4.value;\n\n          if (updater.getColorStyles) {\n            var _updater$getColorStyl = updater.getColorStyles(particle, ctx, radius, zOpacity),\n                fill = _updater$getColorStyl.fill,\n                stroke = _updater$getColorStyl.stroke;\n\n            if (fill) {\n              colorStyles.fill = fill;\n            }\n\n            if (stroke) {\n              colorStyles.stroke = stroke;\n            }\n          }\n\n          if (updater.getTransformValues) {\n            var updaterTransform = updater.getTransformValues(particle);\n\n            for (var key in updaterTransform) {\n              setTransformValue(transform, updaterTransform, key);\n            }\n          }\n\n          (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"_applyResizePlugins\",\n    value: function _applyResizePlugins() {\n      var _a;\n\n      var _iterator5 = _createForOfIteratorHelper(this._resizePlugins),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var plugin = _step5.value;\n          (_a = plugin.resize) === null || _a === void 0 ? void 0 : _a.call(plugin);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"_getPluginParticleColors\",\n    value: function _getPluginParticleColors(particle) {\n      var fColor, sColor;\n\n      var _iterator6 = _createForOfIteratorHelper(this._colorPlugins),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var plugin = _step6.value;\n\n          if (!fColor && plugin.particleFillColor) {\n            fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n          }\n\n          if (!sColor && plugin.particleStrokeColor) {\n            sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n          }\n\n          if (fColor && sColor) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return [fColor, sColor];\n    }\n  }, {\n    key: \"_initCover\",\n    value: function _initCover() {\n      var options = this.container.actualOptions,\n          cover = options.backgroundMask.cover,\n          color = cover.color,\n          coverRgb = rangeColorToRgb(color);\n\n      if (coverRgb) {\n        var coverColor = {\n          r: coverRgb.r,\n          g: coverRgb.g,\n          b: coverRgb.b,\n          a: cover.opacity\n        };\n        this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n      }\n    }\n  }, {\n    key: \"_initStyle\",\n    value: function _initStyle() {\n      var element = this.element,\n          options = this.container.actualOptions;\n\n      if (!element) {\n        return;\n      }\n\n      if (options.fullScreen.enable) {\n        this._originalStyle = deepExtend({}, element.style);\n        element.style.setProperty(\"position\", \"fixed\", \"important\");\n        element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n        element.style.setProperty(\"top\", \"0\", \"important\");\n        element.style.setProperty(\"left\", \"0\", \"important\");\n        element.style.setProperty(\"width\", \"100%\", \"important\");\n        element.style.setProperty(\"height\", \"100%\", \"important\");\n      } else {\n        this._resetOriginalStyle();\n      }\n\n      for (var key in options.style) {\n        if (!key || !options.style) {\n          continue;\n        }\n\n        var value = options.style[key];\n\n        if (!value) {\n          continue;\n        }\n\n        element.style.setProperty(key, value, \"important\");\n      }\n    }\n  }, {\n    key: \"_initTrail\",\n    value: function _initTrail() {\n      var options = this.container.actualOptions,\n          trail = options.particles.move.trail,\n          fillColor = rangeColorToRgb(trail.fillColor);\n\n      if (fillColor) {\n        var _trail = options.particles.move.trail;\n        this._trailFillColor = {\n          r: fillColor.r,\n          g: fillColor.g,\n          b: fillColor.b,\n          a: 1 / _trail.length\n        };\n      }\n    }\n  }, {\n    key: \"_paintBase\",\n    value: function _paintBase(baseColor) {\n      var _this5 = this;\n\n      this.draw(function (ctx) {\n        paintBase(ctx, _this5.size, baseColor);\n      });\n    }\n  }, {\n    key: \"_resetOriginalStyle\",\n    value: function _resetOriginalStyle() {\n      var element = this.element,\n          originalStyle = this._originalStyle;\n\n      if (element && originalStyle) {\n        element.style.position = originalStyle.position;\n        element.style.zIndex = originalStyle.zIndex;\n        element.style.top = originalStyle.top;\n        element.style.left = originalStyle.left;\n        element.style.width = originalStyle.width;\n        element.style.height = originalStyle.height;\n      }\n    }\n  }]);\n\n  return Canvas;\n}();","map":{"version":3,"names":["clear","drawParticle","drawParticlePlugin","drawPlugin","paintBase","getStyleFromHsl","getStyleFromRgb","rangeColorToHsl","rangeColorToRgb","deepExtend","generatedAttribute","setTransformValue","factor","newFactor","key","_a","newValue","undefined","Canvas","container","size","height","width","_context","_generatedCanvas","_preDrawUpdaters","_postDrawUpdaters","_resizePlugins","_colorPlugins","options","actualOptions","trail","particles","move","backgroundMask","enable","paint","length","_trailFillColor","_paintBase","draw","ctx","element","remove","_resetOriginalStyle","cb","particle","delta","spawning","destroyed","radius","getRadius","pfColor","getFillColor","psColor","getStrokeColor","_getPluginParticleColors","fColor","sColor","_b","_c","_d","_e","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","opacity","bubble","value","strokeOpacity","stroke","zOpacity","zStrokeOpacity","transform","colorStyles","fill","_applyPreDrawUpdaters","context","composite","sizeRate","shadow","_applyPostDrawUpdaters","plugin","resize","_initStyle","_initCover","_initTrail","initBackground","initUpdaters","initPlugins","background","elementStyle","style","color","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","plugins","push","particleFillColor","particleStrokeColor","updaters","updater","afterDraw","getColorStyles","getTransformValues","beforeDraw","canvas","dataset","_originalStyle","offsetHeight","offsetWidth","getContext","retina","init","cover","_coverColorStyle","pxRatio","pixelRatio","newSize","oldSize","Object","assign","started","resizeFactor","needsRefresh","updateActualOptions","setDensity","_applyResizePlugins","refresh","call","updaterTransform","coverRgb","coverColor","r","g","b","a","fullScreen","setProperty","toString","fillColor","baseColor","originalStyle","top","left"],"sources":["D:/Projects/facerecognitionbrain/node_modules/tsparticles-engine/esm/Core/Canvas.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase } from \"../Utils/CanvasUtils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { deepExtend } from \"../Utils/Utils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n    var _a;\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n    }\n}\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generatedCanvas = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this._trailFillColor) {\n            this._paintBase(getStyleFromRgb(this._trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        var _a;\n        if (this._generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        if (!this._context) {\n            return;\n        }\n        return cb(this._context);\n    }\n    drawParticle(particle, delta) {\n        var _a;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            var _a, _b, _c, _d, _e;\n            const options = this.container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1, strokeOpacity = (_e = (_d = particle.stroke) === null || _d === void 0 ? void 0 : _d.opacity) !== null && _e !== void 0 ? _e : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container: this.container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    init() {\n        this.resize();\n        this._initStyle();\n        this._initCover();\n        this._initTrail();\n        this.initBackground();\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element, elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor || plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        var _a;\n        if (this._generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this._generatedCanvas =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generatedCanvas;\n        this.element = canvas;\n        this._originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this._paintBase(this._coverColorStyle);\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return;\n        }\n        const oldSize = Object.assign({}, size);\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        this.resize();\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    _applyPostDrawUpdaters(particle) {\n        var _a;\n        for (const updater of this._postDrawUpdaters) {\n            (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n        var _a;\n        for (const updater of this._preDrawUpdaters) {\n            if (updater.getColorStyles) {\n                const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                if (fill) {\n                    colorStyles.fill = fill;\n                }\n                if (stroke) {\n                    colorStyles.stroke = stroke;\n                }\n            }\n            if (updater.getTransformValues) {\n                const updaterTransform = updater.getTransformValues(particle);\n                for (const key in updaterTransform) {\n                    setTransformValue(transform, updaterTransform, key);\n                }\n            }\n            (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyResizePlugins() {\n        var _a;\n        for (const plugin of this._resizePlugins) {\n            (_a = plugin.resize) === null || _a === void 0 ? void 0 : _a.call(plugin);\n        }\n    }\n    _getPluginParticleColors(particle) {\n        let fColor, sColor;\n        for (const plugin of this._colorPlugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    _initCover() {\n        const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = rangeColorToRgb(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n    }\n    _initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        if (options.fullScreen.enable) {\n            this._originalStyle = deepExtend({}, element.style);\n            element.style.setProperty(\"position\", \"fixed\", \"important\");\n            element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n            element.style.setProperty(\"top\", \"0\", \"important\");\n            element.style.setProperty(\"left\", \"0\", \"important\");\n            element.style.setProperty(\"width\", \"100%\", \"important\");\n            element.style.setProperty(\"height\", \"100%\", \"important\");\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    _initTrail() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, fillColor = rangeColorToRgb(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this._trailFillColor = {\n                r: fillColor.r,\n                g: fillColor.g,\n                b: fillColor.b,\n                a: 1 / trail.length,\n            };\n        }\n    }\n    _paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    _resetOriginalStyle() {\n        const element = this.element, originalStyle = this._originalStyle;\n        if (element && originalStyle) {\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}