{"ast":null,"code":"import _classCallCheck from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRandom, getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport var LifeUpdater = /*#__PURE__*/function () {\n  function LifeUpdater(container) {\n    _classCallCheck(this, LifeUpdater);\n\n    this.container = container;\n  }\n\n  _createClass(LifeUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var container = this.container,\n          particlesOptions = particle.options,\n          lifeOptions = particlesOptions.life;\n\n      if (!lifeOptions) {\n        return;\n      }\n\n      particle.life = {\n        delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom()) / container.retina.reduceFactor * 1000 : 0,\n        delayTime: 0,\n        duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom()) / container.retina.reduceFactor * 1000 : 0,\n        time: 0,\n        count: lifeOptions.count\n      };\n\n      if (particle.life.duration <= 0) {\n        particle.life.duration = -1;\n      }\n\n      if (particle.life.count <= 0) {\n        particle.life.count = -1;\n      }\n\n      if (particle.life) {\n        particle.spawning = particle.life.delay > 0;\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      if (!options.life) {\n        options.life = new Life();\n      }\n\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.life.load(source === null || source === void 0 ? void 0 : source.life);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle) || !particle.life) {\n        return;\n      }\n\n      var life = particle.life;\n      var justSpawned = false;\n\n      if (particle.spawning) {\n        life.delayTime += delta.value;\n\n        if (life.delayTime >= particle.life.delay) {\n          justSpawned = true;\n          particle.spawning = false;\n          life.delayTime = 0;\n          life.time = 0;\n        } else {\n          return;\n        }\n      }\n\n      if (life.duration === -1) {\n        return;\n      }\n\n      if (particle.spawning) {\n        return;\n      }\n\n      if (justSpawned) {\n        life.time = 0;\n      } else {\n        life.time += delta.value;\n      }\n\n      if (life.time < life.duration) {\n        return;\n      }\n\n      life.time = 0;\n\n      if (particle.life.count > 0) {\n        particle.life.count--;\n      }\n\n      if (particle.life.count === 0) {\n        particle.destroy();\n        return;\n      }\n\n      var canvasSize = this.container.canvas.size,\n          widthRange = setRangeValue(0, canvasSize.width),\n          heightRange = setRangeValue(0, canvasSize.width);\n      particle.position.x = randomInRange(widthRange);\n      particle.position.y = randomInRange(heightRange);\n      particle.spawning = true;\n      life.delayTime = 0;\n      life.time = 0;\n      particle.reset();\n      var lifeOptions = particle.options.life;\n\n      if (lifeOptions) {\n        life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n        life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n      }\n    }\n  }]);\n\n  return LifeUpdater;\n}();","map":{"version":3,"names":["getRandom","getRangeValue","randomInRange","setRangeValue","Life","LifeUpdater","container","particle","particlesOptions","options","lifeOptions","life","delay","retina","reduceFactor","value","sync","delayTime","duration","time","count","spawning","destroyed","sources","source","load","delta","isEnabled","justSpawned","destroy","canvasSize","canvas","size","widthRange","width","heightRange","position","x","y","reset"],"sources":["D:/Projects/facerecognitionbrain/node_modules/tsparticles-updater-life/esm/LifeUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source === null || source === void 0 ? void 0 : source.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}