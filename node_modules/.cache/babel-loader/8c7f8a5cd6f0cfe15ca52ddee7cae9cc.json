{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nexport var Modes = /*#__PURE__*/function () {\n  function Modes(engine, container) {\n    _classCallCheck(this, Modes);\n\n    this._engine = engine;\n    this._container = container;\n  }\n\n  _createClass(Modes, [{\n    key: \"load\",\n    value: function load(data) {\n      if (!data) {\n        return;\n      }\n\n      if (this._container) {\n        var interactors = this._engine.plugins.interactors.get(this._container);\n\n        if (interactors) {\n          var _iterator = _createForOfIteratorHelper(interactors),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var interactor = _step.value;\n\n              if (interactor.loadModeOptions) {\n                interactor.loadModeOptions(this, data);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }\n    }\n  }]);\n\n  return Modes;\n}();","map":{"version":3,"names":["Modes","engine","container","_engine","_container","data","interactors","plugins","get","interactor","loadModeOptions"],"sources":["D:/Projects/facerecognitionbrain/node_modules/tsparticles-engine/esm/Options/Classes/Interactivity/Modes/Modes.js"],"sourcesContent":["export class Modes {\n    constructor(engine, container) {\n        this._engine = engine;\n        this._container = container;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (this._container) {\n            const interactors = this._engine.plugins.interactors.get(this._container);\n            if (interactors) {\n                for (const interactor of interactors) {\n                    if (interactor.loadModeOptions) {\n                        interactor.loadModeOptions(this, data);\n                    }\n                }\n            }\n        }\n    }\n}\n"],"mappings":";;;AAAA,WAAaA,KAAb;EACI,eAAYC,MAAZ,EAAoBC,SAApB,EAA+B;IAAA;;IAC3B,KAAKC,OAAL,GAAeF,MAAf;IACA,KAAKG,UAAL,GAAkBF,SAAlB;EACH;;EAJL;IAAA;IAAA,OAKI,cAAKG,IAAL,EAAW;MACP,IAAI,CAACA,IAAL,EAAW;QACP;MACH;;MACD,IAAI,KAAKD,UAAT,EAAqB;QACjB,IAAME,WAAW,GAAG,KAAKH,OAAL,CAAaI,OAAb,CAAqBD,WAArB,CAAiCE,GAAjC,CAAqC,KAAKJ,UAA1C,CAApB;;QACA,IAAIE,WAAJ,EAAiB;UAAA,2CACYA,WADZ;UAAA;;UAAA;YACb,oDAAsC;cAAA,IAA3BG,UAA2B;;cAClC,IAAIA,UAAU,CAACC,eAAf,EAAgC;gBAC5BD,UAAU,CAACC,eAAX,CAA2B,IAA3B,EAAiCL,IAAjC;cACH;YACJ;UALY;YAAA;UAAA;YAAA;UAAA;QAMhB;MACJ;IACJ;EAnBL;;EAAA;AAAA"},"metadata":{},"sourceType":"module"}