{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Projects/facerecognitionbrain/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl } from \"tsparticles-engine\";\nimport { Bubble } from \"./Options/Classes/Bubble\";\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    var value = particleValue + (modeValue - optionsValue) * ratio;\n    return clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    var _value = particleValue - (optionsValue - modeValue) * ratio;\n\n    return clamp(_value, modeValue, particleValue);\n  }\n}\n\nexport var Bubbler = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Bubbler, _ExternalInteractorBa);\n\n  var _super = _createSuper(Bubbler);\n\n  function Bubbler(container) {\n    var _this;\n\n    _classCallCheck(this, Bubbler);\n\n    _this = _super.call(this, container);\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    _this.handleClickMode = function (mode) {\n      if (mode !== \"bubble\") {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      container.bubble.clicking = true;\n    };\n\n    return _this;\n  }\n\n  _createClass(Bubbler, [{\n    key: \"clear\",\n    value: function clear(particle, delta, force) {\n      if (particle.bubble.inRange && !force) {\n        return;\n      }\n\n      delete particle.bubble.div;\n      delete particle.bubble.opacity;\n      delete particle.bubble.radius;\n      delete particle.bubble.color;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var container = this.container,\n          bubble = container.actualOptions.interactivity.modes.bubble;\n\n      if (!bubble) {\n        return;\n      }\n\n      container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n\n      if (bubble.size !== undefined) {\n        container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n      }\n    }\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(delta) {\n        var _this2 = this;\n\n        var options, events, onHover, onClick, hoverEnabled, hoverMode, clickEnabled, clickMode, divs;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n\n                if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n                  this.hoverBubble(delta);\n                } else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n                  this.clickBubble(delta);\n                } else {\n                  divModeExecute(\"bubble\", divs, function (selector, div) {\n                    return _this2.singleSelectorHover(delta, selector, div);\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function interact(_x) {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var _a;\n\n      var container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n          divs = events.onDiv,\n          divBubble = isDivModeEnabled(\"bubble\", divs);\n\n      if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      var clickMode = events.onClick.mode;\n      return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n  }, {\n    key: \"loadModeOptions\",\n    value: function loadModeOptions(options) {\n      if (!options.bubble) {\n        options.bubble = new Bubble();\n      }\n\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.bubble.load(source === null || source === void 0 ? void 0 : source.bubble);\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(particle) {\n      particle.bubble.inRange = false;\n    }\n  }, {\n    key: \"clickBubble\",\n    value: function clickBubble(delta) {\n      var _this3 = this;\n\n      var _a, _b;\n\n      var container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition,\n          bubble = options.interactivity.modes.bubble;\n\n      if (!bubble || !mouseClickPos) {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      var distance = container.retina.bubbleModeDistance;\n\n      if (!distance || distance < 0) {\n        return;\n      }\n\n      var query = container.particles.quadTree.queryCircle(mouseClickPos, distance, function (p) {\n        return _this3.isEnabled(p);\n      });\n\n      var _iterator = _createForOfIteratorHelper(query),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var particle = _step.value;\n\n          if (!container.bubble.clicking) {\n            continue;\n          }\n\n          particle.bubble.inRange = !container.bubble.durationEnd;\n          var pos = particle.getPosition(),\n              distMouse = getDistance(pos, mouseClickPos),\n              timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n          if (timeSpent > bubble.duration) {\n            container.bubble.durationEnd = true;\n          }\n\n          if (timeSpent > bubble.duration * 2) {\n            container.bubble.clicking = false;\n            container.bubble.durationEnd = false;\n          }\n\n          var sizeData = {\n            bubbleObj: {\n              optValue: container.retina.bubbleModeSize,\n              value: particle.bubble.radius\n            },\n            particlesObj: {\n              optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n              value: particle.size.value\n            },\n            type: \"size\"\n          };\n          this.process(particle, distMouse, timeSpent, sizeData);\n          var opacityData = {\n            bubbleObj: {\n              optValue: bubble.opacity,\n              value: particle.bubble.opacity\n            },\n            particlesObj: {\n              optValue: getRangeMax(particle.options.opacity.value),\n              value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n            },\n            type: \"opacity\"\n          };\n          this.process(particle, distMouse, timeSpent, opacityData);\n\n          if (!container.bubble.durationEnd) {\n            if (distMouse <= distance) {\n              this.hoverBubbleColor(particle, distMouse);\n            } else {\n              delete particle.bubble.color;\n            }\n          } else {\n            delete particle.bubble.color;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"hoverBubble\",\n    value: function hoverBubble(delta) {\n      var _this4 = this;\n\n      var container = this.container,\n          mousePos = container.interactivity.mouse.position,\n          distance = container.retina.bubbleModeDistance;\n\n      if (!distance || distance < 0 || mousePos === undefined) {\n        return;\n      }\n\n      var query = container.particles.quadTree.queryCircle(mousePos, distance, function (p) {\n        return _this4.isEnabled(p);\n      });\n\n      var _iterator2 = _createForOfIteratorHelper(query),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var particle = _step2.value;\n          particle.bubble.inRange = true;\n          var pos = particle.getPosition(),\n              pointDistance = getDistance(pos, mousePos),\n              ratio = 1 - pointDistance / distance;\n\n          if (pointDistance <= distance) {\n            if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n              this.hoverBubbleSize(particle, ratio);\n              this.hoverBubbleOpacity(particle, ratio);\n              this.hoverBubbleColor(particle, ratio);\n            }\n          } else {\n            this.reset(particle);\n          }\n\n          if (container.interactivity.status === mouseLeaveEvent) {\n            this.reset(particle);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"hoverBubbleColor\",\n    value: function hoverBubbleColor(particle, ratio, divBubble) {\n      var options = this.container.actualOptions;\n      var bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n      if (!bubbleOptions) {\n        return;\n      }\n\n      if (!particle.bubble.finalColor) {\n        var modeColor = bubbleOptions.color;\n\n        if (!modeColor) {\n          return;\n        }\n\n        var bubbleColor = itemFromSingleOrMultiple(modeColor);\n        particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n      }\n\n      if (!particle.bubble.finalColor) {\n        return;\n      }\n\n      if (bubbleOptions.mix) {\n        particle.bubble.color = undefined;\n        var pColor = particle.getFillColor();\n        particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n      } else {\n        particle.bubble.color = particle.bubble.finalColor;\n      }\n    }\n  }, {\n    key: \"hoverBubbleOpacity\",\n    value: function hoverBubbleOpacity(particle, ratio, divBubble) {\n      var _a, _b, _c, _d;\n\n      var container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : (_b = options.interactivity.modes.bubble) === null || _b === void 0 ? void 0 : _b.opacity;\n\n      if (!modeOpacity) {\n        return;\n      }\n\n      var optOpacity = particle.options.opacity.value;\n      var pOpacity = (_d = (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n      var opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n\n      if (opacity !== undefined) {\n        particle.bubble.opacity = opacity;\n      }\n    }\n  }, {\n    key: \"hoverBubbleSize\",\n    value: function hoverBubbleSize(particle, ratio, divBubble) {\n      var container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n      if (modeSize === undefined) {\n        return;\n      }\n\n      var optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n      var pSize = particle.size.value;\n      var size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n      if (size !== undefined) {\n        particle.bubble.radius = size;\n      }\n    }\n  }, {\n    key: \"process\",\n    value: function process(particle, distMouse, timeSpent, data) {\n      var container = this.container,\n          bubbleParam = data.bubbleObj.optValue,\n          options = container.actualOptions,\n          bubble = options.interactivity.modes.bubble;\n\n      if (!bubble || bubbleParam === undefined) {\n        return;\n      }\n\n      var bubbleDuration = bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n      if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= bubbleDistance) {\n          var obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n          if (obj !== bubbleParam) {\n            var value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n            if (type === \"size\") {\n              particle.bubble.radius = value;\n            }\n\n            if (type === \"opacity\") {\n              particle.bubble.opacity = value;\n            }\n          }\n        } else {\n          if (type === \"size\") {\n            delete particle.bubble.radius;\n          }\n\n          if (type === \"opacity\") {\n            delete particle.bubble.opacity;\n          }\n        }\n      } else if (pObjBubble) {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    }\n  }, {\n    key: \"singleSelectorHover\",\n    value: function singleSelectorHover(delta, selector, div) {\n      var _this5 = this;\n\n      var container = this.container,\n          selectors = document.querySelectorAll(selector),\n          bubble = container.actualOptions.interactivity.modes.bubble;\n\n      if (!bubble || !selectors.length) {\n        return;\n      }\n\n      selectors.forEach(function (item) {\n        var elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area, function (p) {\n          return _this5.isEnabled(p);\n        });\n\n        var _iterator3 = _createForOfIteratorHelper(query),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var particle = _step3.value;\n\n            if (!area.contains(particle.getPosition())) {\n              continue;\n            }\n\n            particle.bubble.inRange = true;\n            var divs = bubble.divs;\n            var divBubble = divMode(divs, elem);\n\n            if (!particle.bubble.div || particle.bubble.div !== elem) {\n              _this5.clear(particle, delta, true);\n\n              particle.bubble.div = elem;\n            }\n\n            _this5.hoverBubbleSize(particle, 1, divBubble);\n\n            _this5.hoverBubbleOpacity(particle, 1, divBubble);\n\n            _this5.hoverBubbleColor(particle, 1, divBubble);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      });\n    }\n  }]);\n\n  return Bubbler;\n}(ExternalInteractorBase);","map":{"version":3,"names":["Circle","ExternalInteractorBase","Rectangle","clamp","colorMix","divMode","divModeExecute","getDistance","getRangeMax","isDivModeEnabled","isInArray","itemFromSingleOrMultiple","mouseLeaveEvent","mouseMoveEvent","rangeColorToHsl","rgbToHsl","Bubble","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","Bubbler","container","bubble","handleClickMode","mode","clicking","particle","delta","force","inRange","div","opacity","radius","color","actualOptions","interactivity","modes","retina","bubbleModeDistance","distance","pixelRatio","size","undefined","bubbleModeSize","options","events","onHover","onClick","hoverEnabled","enable","hoverMode","clickEnabled","clickMode","divs","onDiv","hoverBubble","clickBubble","selector","singleSelectorHover","_a","mouse","divBubble","position","clickPosition","sources","source","load","_b","mouseClickPos","query","particles","quadTree","queryCircle","p","isEnabled","durationEnd","pos","getPosition","distMouse","timeSpent","Date","getTime","clickTime","duration","sizeData","bubbleObj","optValue","particlesObj","type","process","opacityData","hoverBubbleColor","mousePos","pointDistance","status","hoverBubbleSize","hoverBubbleOpacity","reset","bubbleOptions","finalColor","modeColor","bubbleColor","mix","pColor","getFillColor","_c","_d","modeOpacity","optOpacity","pOpacity","modeSize","optSize","pSize","data","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","obj","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","contains","clear"],"sources":["D:/Projects/facerecognitionbrain/node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js"],"sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"tsparticles-engine\";\nimport { Bubble } from \"./Options/Classes/Bubble\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    async interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this.hoverBubble(delta);\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this.clickBubble(delta);\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events, divs = events.onDiv, divBubble = isDivModeEnabled(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source === null || source === void 0 ? void 0 : source.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n    clickBubble(delta) {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubble = options.interactivity.modes.bubble;\n        if (!bubble || !mouseClickPos) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        const distance = container.retina.bubbleModeDistance;\n        if (!distance || distance < 0) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= distance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble(delta) {\n        const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n        if (!distance || distance < 0 || mousePos === undefined) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!bubbleOptions) {\n            return;\n        }\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = itemFromSingleOrMultiple(modeColor);\n            particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c, _d;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : (_b = options.interactivity.modes.bubble) === null || _b === void 0 ? void 0 : _b.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_d = (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubble = options.interactivity.modes.bubble;\n        if (!bubble || bubbleParam === undefined) {\n            return;\n        }\n        const bubbleDuration = bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    singleSelectorHover(delta, selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble || !selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = bubble.divs;\n                const divBubble = divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.clear(particle, delta, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}